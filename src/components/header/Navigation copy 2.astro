---
// Props: navItems (array of navigation items)
const { navItems } = Astro.props
const currentPath = Astro.url.pathname

function isActive(href) {
  return href === currentPath
}
---

<nav class="navigation relative container mx-auto p-4">
  <!-- Header -->
  <div class="flex items-center justify-between">
    <button id="menu-toggle" class="flex h-8 w-8 flex-col items-center justify-center lg:hidden">
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>
  </div>

  <!-- Combined Menu (Mobile + Desktop) -->
  <ul id="main-menu" class="hidden flex-col gap-y-2 pt-4 lg:flex lg:flex-row lg:items-center lg:gap-x-6">
    {
      navItems.map((item, idx) => (
        <li class={`group relative ${isActive(item.href) ? 'active' : ''}`} id={`menu-${idx}`}>
          <a
            href={item.href || '#'}
            class="menuItem flex w-full items-center justify-between px-2 py-2 lg:py-1"
            data-toggle={item.submenu ? 'true' : 'false'}
          >
            {item.name}
            {item.submenu && <span class="ml-1 text-sm">⯆</span>}
          </a>

          {item.submenu && (
            <ul class="submenu mt-2 ml-4 hidden flex-col lg:absolute lg:top-full lg:left-0 lg:mt-0 lg:ml-0 lg:hidden lg:min-w-[250px] lg:rounded-md lg:bg-white lg:shadow-lg lg:group-hover:flex">
              {item.submenu.map((sub, subIdx) => (
                <li class="group relative" id={`submenu-${idx}-${subIdx}`}>
                  <a
                    href={sub.href || '#'}
                    class="subMenuItem flex w-full items-center justify-between px-4 py-2"
                    data-toggle={sub.submenu ? 'true' : 'false'}
                    target={sub.href?.startsWith('http') ? '_blank' : undefined}
                    rel={sub.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                  >
                    {sub.name}
                    {sub.submenu && <span class="ml-1 text-sm">⯈</span>}
                  </a>

                  {sub.submenu && (
                    <ul class="submenu mt-2 ml-4 hidden flex-col lg:absolute lg:top-0 lg:left-full lg:mt-0 lg:ml-0 lg:hidden lg:min-w-[250px] lg:rounded-md lg:bg-white lg:shadow-lg lg:group-hover:flex">
                      {sub.submenu.map((subSub) => (
                        <li>
                          <a href={subSub.href || '#'} class="subMenuItem block px-4 py-2">
                            {subSub.name}
                          </a>
                        </li>
                      ))}
                    </ul>
                  )}
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<style>
  @reference "tailwindcss";
  .hamburger-line {
    @apply bg-black w-6 h-0.5 my-1 transition-all duration-300;
  }

  .menuItem {
    @apply font-semibold;
  }

  .submenu {
    @apply bg-white;
  }

  .active > a {
    color: var(--color-menu-hover);
  }

  @media (min-width: 1024px) {
    #main-menu {
      display: flex !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('menu-toggle')
    const menu = document.getElementById('main-menu')

    toggleBtn.addEventListener('click', () => {
      menu.classList.toggle('hidden')
      toggleBtn.classList.toggle('open')
    })

    // Handle submenu toggling on mobile
    const isMobile = () => window.innerWidth < 1024

    document.querySelectorAll('#main-menu a[data-toggle="true"]').forEach((link) => {
      link.addEventListener('click', (e) => {
        if (isMobile()) {
          e.preventDefault()

          const parent = link.parentElement
          const submenu = parent.querySelector('ul')

          if (submenu) {
            submenu.classList.toggle('hidden')
          }
        }
      })
    })
  })
</script>
